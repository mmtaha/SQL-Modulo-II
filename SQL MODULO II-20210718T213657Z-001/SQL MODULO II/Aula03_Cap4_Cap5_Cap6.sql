--COLOCAR EM USO O BANCO PEDIDOS
USE PEDIDOS
--FAZER UMA QUERY PARA RETORNAR O NUMERO DO PEDIDO, O NOME DO 
--CLIENTE,VENDEDOR, A QUANTIDADE, O PRECO UNITARIO E A DESCRIÇÃO
--DO PRODUTO
SELECT PED.NUM_PEDIDO
      ,CONVERT(DATE,PED.DATA_EMISSAO,121) AS DATA_CONVERT
      ,CLI.NOME AS NOME_CLI
     , VEND.NOME AS NOME_VEND
     , QUANTIDADE
     , PR_UNITARIO
     , DESCRICAO 
FROM TB_PEDIDO AS PED
INNER JOIN TB_CLIENTE AS CLI
ON CLI.CODCLI=PED.CODCLI
INNER JOIN TB_VENDEDOR AS VEND
ON VEND.CODVEN=PED.CODVEN
INNER JOIN TB_ITENSPEDIDO AS ITEM
ON PED.NUM_PEDIDO=ITEM.NUM_PEDIDO
INNER JOIN TB_PRODUTO AS PROD
ON PROD.ID_PRODUTO=ITEM.ID_PRODUTO


DECLARE @DATE DATETIME
SET @DATE=GETDATE()
SELECT CONVERT(VARCHAR(10),@DATE,103)

SELECT CONVERT(VARCHAR(10),@DATE,121)

SELECT CONVERT(DATE,@DATE,121)

SELECT CONVERT(DATE,DATA_EMISSAO,121)
FROM TB_PEDIDO
---------------------------------------------------------------------------------------------------------
SELECT *
FROM PESSOA
DROP TABLE PESSOA
--CRIAR TABELA PESSOA
--NONCLUSTERED
CREATE TABLE PESSOA
(COD INT
,NOME VARCHAR(40)
)

INSERT INTO PESSOA
VALUES(3,'PATRICIA')
              ,(1,'ANDERSON')
              ,(4,'MARIA')
SELECT *
FROM PESSOA

--CRIAR INDICE NÃO CLUSTERED
CREATE NONCLUSTERED INDEX NDX_COD ON PESSOA(COD)
INSERT INTO PESSOA
VALUES(2,'VALERIA')
              ,(5,'EDUARDO')
EXEC SP_HELP PESSOA

--INDICE CLUSTERED(ORGANIZADO)
--CRIAR TABELA PESSOA
--NONCLUSTERED
DROP TABLE PESSOA
CREATE TABLE PESSOA
(COD INT PRIMARY KEY
,NOME VARCHAR(40)
)

INSERT INTO PESSOA
VALUES(3,'PATRICIA')
              ,(1,'ANDERSON')
              ,(4,'MARIA')
SELECT *
FROM PESSOA

SELECT CODCLI
              , NOME
              , ESTADO
FROM TB_CLIENTE 
WHERE ESTADO='SP'
SELECT *
FROM TB_CLIENTE


CREATE NONCLUSTERED INDEX NDX_ESTADO ON TB_CLIENTE(ESTADO)

CREATE INDEX NDX_CLIENTE_INCLUDE 
ON TB_CLIENTE (NOME) INCLUDE(ESTADO)

SELECT CODCLI
              , NOME
              , ESTADO
FROM TB_CLIENTE 
WHERE ESTADO='SP'

--APAGAR O INDICE
DROP INDEX TB_CLIENTE.NDX_CLIENTE_INCLUDE
--CAPITULO 5-OPENROWSET
EXEC sp_configure 'show advanced option', '1'
reconfigure
GO
exec sp_configure 'Ad Hoc Distributed Queries',1
reconfigure
USE PEDIDOS
SELECT *
FROM PESSOA

DELETE
FROM PESSOA
--CONSULTAR A PLANILHA PESSOA.XLSX
SELECT *
FROM OPENROWSET('Microsoft.ACE.OLEDB.12.0',
'Excel 12.0;Database=C:\DADOS\PESSOA.XLSX',
'SELECT COD, NOME FROM [NOMES$]') OP
JOIN TB_CLIENTE AS CLI
ON CLI.CODCLI=OP.COD

--IMPORTAR OS DADOS DO EXCEL PARA A TABELA PESSOA NO SQL
INSERT INTO PESSOA
SELECT *
FROM OPENROWSET('Microsoft.ACE.OLEDB.12.0',
'Excel 12.0;Database=C:\DADOS\PESSOA.XLSX',
'SELECT COD, NOME FROM [NOMES$]')

SELECT *
FROM PESSOA
--EXPORTAR OS DADOS PARA EXCEL
INSERT INTO OPENROWSET('Microsoft.ACE.OLEDB.12.0',
'Excel 8.0;Database=C:\DADOS\PESSOA.XLSX',
'SELECT COD, NOME FROM [NOMES$]')
SELECT * FROM PESSOA
EXEC master . dbo. sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0' 
, N'AllowInProcess' , 1
GO
EXEC master . dbo. sp_MSset_oledb_prop N'Microsoft.ACE.OLEDB.12.0' , N'DynamicParameters', 1
--LER DADOS DO ACCESS
SELECT *
FROM OPENROWSET('Microsoft.ACE.OLEDB.12.0',
'C:\Dados\Pedidos.accdb';'admin';'',PEDIDOS)
--EXERCÍCIO
--CRIAR A TABELA TIPOPRODUTO
--CAMPOS: COD_TIPO INT PK, TIPO VARCHAR(30)
CREATE TABLE TIPOPRODUTO
(COD_TIPO INT PRIMARY KEY
,TIPO VARCHAR(30)
)
--IMPORTAR DADOS DO ACCESS(TIPOPRODUTO)
INSERT INTO TIPOPRODUTO(COD_TIPO,TIPO)
SELECT *
FROM OPENROWSET('Microsoft.ACE.OLEDB.12.0',
'C:\Dados\Pedidos.accdb';'admin';'',TIPOPRODUTO)

SELECT *
FROM TIPOPRODUTO
--BULK INSERT

CREATE TABLE TESTE_BULK_INSERT
( CODIGO INT,
NOME VARCHAR(40),
DATA_NASCIMENTO DATETIME )

BULK INSERT TESTE_BULK_INSERT
FROM 'C:\DADOS\BULK_INSERT.TXT'
WITH
(FIELDTERMINATOR =';',
ROWTERMINATOR = '\n',
codepage = 'acp'
)

SELECT *
FROM  TIPOPRODUTO
----------------------------------------------------------------------------------------------------
--GERAR XML
SELECT NOME
              , DATA_ADMISSAO
              , SALARIO
FROM TB_EMPREGADO
FOR XML RAW
------------------------------------------------------------------------------------------------------
--LINHAS E RAIZ
SELECT NOME
              , DATA_ADMISSAO
              , SALARIO
FROM TB_EMPREGADO
FOR XML RAW('PRODUTO') , ROOT('PRODUTOS')
---------------------------------------------------------------------------------------------------------
SELECT NOME
              , DATA_ADMISSAO
              , SALARIO
FROM TB_EMPREGADO
ORDER BY SALARIO
FOR XML RAW('PRODUTO') , ROOT('PRODUTOS'), ELEMENTS
--NULABILIDADE DE CAMPOS EM UM REGISTRO
SELECT NOME
              , DATA_ADMISSAO
              , SALARIO
FROM TB_EMPREGADO
ORDER BY SALARIO
FOR XML RAW('PRODUTO') , ROOT('PRODUTOS'), ELEMENTS XSINIL
--------------------------------------------------------------------------------------------------------
--AUTO 
SELECT EMP.CODFUN
              , EMP.NOME
              , EMP.DATA_ADMISSAO
              , EMP.SALARIO
FROM TB_EMPREGADO AS EMP
ORDER BY SALARIO
FOR XML AUTO , ROOT('PRODUTOS'), ELEMENTS XSINIL
--------------------------------------------------------------------------------------------------------------
SELECT Empregado.CODFUN, Empregado.NOME
              , Empregado.DATA_ADMISSAO, Empregado.SALARIO
              , Dependente.CODDEP
              , Dependente.NOME, Dependente.DATA_NASCIMENTO
FROM TB_EMPREGADO Empregado 
JOIN TB_DEPENDENTE Dependente 
ON Empregado.CODFUN = Dependente.CODFUN
FOR XML AUTO, ROOT('Empregados'), ELEMENTS XSINIL
--------------------------------------------------------------------------------------------------------------
--EXERCICIO
--GERAR UM XML COM RAIZ E ELEMENTOS PARA A QUERY: RETORNAR O 
--CODIGO DO CLIENTE O NOME, O NUMERO DO PEDIDO, A DATA DE EMISSAO
--O TOTAL DE ITENS DO PEDIDO E A DESCRIÇÃO DO PRODUTO
SELECT NOME
              , PED.NUM_PEDIDO
              , DATA_EMISSAO
              , QUANTIDADE*PR_UNITARIO AS TOTAL
              , DESCRICAO
FROM TB_PEDIDO AS PED
INNER JOIN TB_CLIENTE AS CLI
ON CLI.CODCLI=PED.CODCLI
INNER JOIN TB_ITENSPEDIDO AS ITEM
ON PED.NUM_PEDIDO=ITEM.NUM_PEDIDO
INNER JOIN TB_PRODUTO AS PROD
ON PROD.ID_PRODUTO=ITEM.ID_PRODUTO
FOR XML AUTO, ROOT('PEDIDOS'), ELEMENTS XSINIL
--XML EXPLICIT

SELECT 1 AS Tag
              , NULL AS Parent
              , CODFUN [EMPREGADO!1!CODIGO]
              , NOME  [EMPREGADO!1!FUNCIONARIO!ELEMENT]
              , SALARIO [EMPREGADO!1!APELIDO_SALARIO!ELEMENT]
FROM TB_EMPREGADO
FOR XML EXPLICIT, ROOT('EMPREGADOS')
-------------------------------------------------------------------------------------------------------
--VARIAVEL(@)
--DECLARAR UMA VARIAVEL INTEIRA
DECLARE @VALOR INT
SET @VALOR=10
--PRINT @VALOR
SELECT @VALOR
--EXERCICIO 
--A VARIAVEL @SALARIO DEVE ARMAZENAR O SALARIO DO FUNCIONARIO
--DE CODIGO 5
DECLARE @SALARIO NUMERIC(18,2)
SET @SALARIO=(SELECT SALARIO
                                 FROM TB_EMPREGADO
                                 WHERE CODFUN=5)
--PRINT @SALARIO
SELECT @SALARIO AS SALARIO_FUNC
--------------------------------------------------------------------------------------------------------------
--XML (QUERY)
--CRIAR UMA VARIAVEL DO TIPO XML
DECLARE @XML XML
SET @XML=(SELECT CODFUN, NOME, DATA_ADMISSAO
                         FROM TB_EMPREGADO AS EMPREGADO
                         FOR XML AUTO, ELEMENTS)

--SELECT @XML.query('EMPREGADO')
--VALUE
SELECT @XML.value('(EMPREGADO/NOME)[9]', 'varchar(100)')
SELECT @XML.value('(EMPREGADO/DATA_ADMISSAO)[9]','DATETIME')
SELECT @XML.exist('(EMPREGADO/CODFUN)[10000]')

--CONFIGURAR O SQL PARA GRAVAR ARQUIVO XML
sp_configure 'xp_cmdshell',1
go
reconfigure
DECLARE @CMD VARCHAR(4000)
SET @CMD ='BCP "SELECT * FROM PEDIDOS.DBO.TB_TIPOPRODUTO AS TIPO FOR XML AUTO,ROOT(''RESULTADO''), ELEMENTS " ' +' QUERYOUT "C:\DADOS\ARQUIVOXML.XML" -t -w -t -T'
EXEC MASTER..XP_CMDSHELL @CMD
--CONSULTAR O ARQUIVOXML.XML

SELECT
X.TIPO.query('COD_TIPO').value('.', 'INT'),
X.TIPO.query('TIPO').value('.', 'VARCHAR(30)')
FROM
(SELECT CAST(X AS XML)
FROM OPENROWSET(
BULK 'C:\DADOS\ARQUIVOXML.XML',SINGLE_BLOB) AS DADOS(X)
) AS DADOS(X)
CROSS APPLY X.nodes('RESULTADO/TIPO') AS X(TIPO)
--------------------------------------------------------------------------------------------------------------
--GERAR ARQUIVO JSON
SELECT CODFUN
              , NOME
              , SALARIO
FROM TB_EMPREGADO
FOR JSON AUTO

--RAIZ
SELECT CODFUN
              , NOME
              , SALARIO
FROM TB_EMPREGADO
FOR JSON AUTO, ROOT ('EMPREGADOS')

--RAIZ CLIENTES COM VÁRIOS CAMPOS
SELECT
Cliente.CODCLI AS IdCliente, Cliente.NOME AS Cliente,
Pedidos.NUM_PEDIDO AS IdPedido
FROM TB_CLIENTE Cliente
JOIN TB_PEDIDO Pedidos 
ON Cliente.CODCLI = Pedidos.CODCLI
WHERE Pedidos.DATA_EMISSAO BETWEEN '2013.1.1' AND '2013.1.1'
-- Importante para ter um resultado correto
ORDER BY Cliente.NOME, Pedidos.NUM_PEDIDO
FOR JSON AUTO, ROOT('Clientes')

SELECT
Cliente.CODCLI AS IdCliente, Cliente.NOME AS Cliente,
Pedidos.NUM_PEDIDO AS IdPedido,
Pedidos.VLR_TOTAL AS VlrPedido, Pedidos.DATA_EMISSAO AS Emissao
FROM TB_CLIENTE Cliente JOIN TB_PEDIDO Pedidos ON Cliente.CODCLI =
Pedidos.CODCLI
WHERE Pedidos.DATA_EMISSAO BETWEEN '2014.1.1' AND '2014.1.31'
FOR JSON AUTO, ROOT('Clientes')
--PARA COMANDOS DO JSON EXECUTAR É NECESSÁRIO A COMPATIBILIDADE
--130
SELECT *
FROM SYS.DATABASES
ALTER DATABASE PEDIDOS
SET COMPATIBILITY_LEVEL=130
--OPENJSON
SELECT *
FROM OPENJSON ('["IdCliente:617","Cliente:ADALBERTO M. CABRAL"]')
/*,
{"IdCliente":612,"Cliente":"ADRIAN MORENO"}]')
*/
SELECT *
FROM OPENJSON('["SÃO PAULO","MINAS GERAIS"]')
-------------------------------------------------------------------------------------------------------------
DECLARE @json NVARCHAR(100)
SET @json = N'{
"CODCLI": 1,
"NOME": "IMPACTA Treinamento"}'
--SELECT * FROM OPENJSON(@json) AS CLIENTE;

--SELECT [KEY], Value FROM OPENJSON(@json) AS CLIENTE;
SELECT JSON_VALUE(@JSON, '$.NOME') AS NOME
-------------------------------------------------------------------------------------------------------------

--GRAVAR ARQUIVO JSON
DECLARE @CMD VARCHAR(4000)
SET @CMD ='BCP "SELECT * FROM PEDIDOS.DBO.TB_TIPOPRODUTO AS TIPO FOR JSON AUTO" ' +' QUERYOUT "C:\DADOS\ARQUIVOJSON.JSON" -t -w -t -T'
EXEC MASTER..XP_CMDSHELL @CMD

--LENDO ARQUIVO JSON
SELECT RESULTADO.*
FROM OPENROWSET (BULK 'C:\DADOS\ARQUIVOJSON.JSON', SINGLE_NCLOB) as
j
CROSS APPLY OPENJSON(BulkColumn)
WITH( COD_TIPO INT, TIPO nvarchar(30)) AS RESULTADO
-------------------------------------------------------------------------------------------------------------
--CAP6 - VIEWS
--EM VIEWS NÃO É PERMITIDO O USO DE VARIÁVEIS, SO É UTILIZADO 
--ORDER BY QUANDO TEM A CLAUSULA TOP
CREATE VIEW VW_RELAT_PED
AS
SELECT PED.NUM_PEDIDO
              , NOME AS NOME_CLI
              , QUANTIDADE * PR_UNITARIO AS TOTAL_ITEM
FROM TB_PEDIDO AS PED
INNER JOIN TB_CLIENTE AS CLI
ON CLI.CODCLI=PED.CODCLI
INNER JOIN TB_ITENSPEDIDO AS ITEM
ON PED.NUM_PEDIDO=ITEM.NUM_PEDIDO
WHERE DATA_EMISSAO BETWEEN '2014/01/01' AND '2014/01/31'
-------------------------------------------------------------------------------------------------------------
--CRIPTOGRAFIA
CREATE VIEW VW_EMP WITH ENCRYPTION
AS
SELECT  CODFUN, NOME, DATA_ADMISSAO,
COD_DEPTO, COD_CARGO, SALARIO
FROM TB_EMPREGADO

SELECT NOME, DATA_ADMISSAO
FROM VW_EMP

EXEC SP_HELPTEXT VW_EMP
--APAGAR VIEW
DROP VIEW VW_EMP



SELECT *
FROM VW_RELAT_PED
--EXIBE O SCRIPT DA VIEW
EXEC SP_HELPTEXT VW_RELAT_PED
-----------------------------------------------------------------------------------------------------------